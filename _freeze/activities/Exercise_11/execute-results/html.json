{
  "hash": "30bf7d992fcad53a937b1a353f8edff3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lesson 11 - Strings\"\nnumber-sections: true\nexecute: \n  warning: false\nfig-env: 'figure'\nfig-pos: 'h'\nfig-align: center\ncode-fold: false\n---\n\n\n\n\n\n\n\n::: {.callout-caution title=\"Learning Goals\"}\n-   Learn some fundamentals of working with strings of text data.\n-   Learn functions to search and replace, detect patterns, locate patterns, extract patterns, and separate text with the `stringr` package.\n:::\n\n::: {.callout-note title=\"Additional Resources\"}\nFor more information about the topics covered in this chapter, refer to the resources below:\n\n-   [Working with strings (YouTube)](https://www.youtube.com/watch?v=__pJ_u94LZg&t=52s) by Lisa Lendway\n-   [strings cheat sheet (pdf)](https://raw.githubusercontent.com/rstudio/cheatsheets/main/strings.pdf)\n-   [Strings (html)](https://r4ds.hadley.nz/strings.html) by Wickham, Çetinkaya-Rundel, & Grolemund\n-   [Regular expressions (html)](https://mdsr-book.github.io/mdsr2e/ch-text.html#regular-expressions-using-macbeth) by Baumer, Kaplan, and Horton\n-   [RegExplain RStudio addin tool (html)](https://www.garrickadenbuie.com/project/regexplain/) (Garrick Aden-Buie)\n-   [regexr exploration tool (html)](https://regexr.com/)\n:::\n\n\n## Exercises\n\n### Exercise 1: Time slots {.unnumbered}\n\nThe `courses` data includes *actual* data scraped from Mac's [class schedule](https://macadmsys.macalester.edu/macssb/customPage/page/classSchedule). (Thanks to Prof Leslie Myint for the scraping code!!)\n\nIf you want to learn how to scrape data, take COMP/STAT 212, Intermediate Data Science! NOTE: For simplicity, I removed classes that had \"TBA\" for the `days`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\ncourses <- read.csv(\"https://mac-stat.github.io/data/registrar.csv\")\n\n# Check it out\nhead(courses)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       number   crn                                                name  days\n1 AMST 112-01 10318         Introduction to African American Literature M W F\n2 AMST 194-01 10073              Introduction to Asian American Studies M W F\n3 AMST 194-F1 10072 What’s After White Empire - And Is It Already Here?  T R \n4 AMST 203-01 10646 Politics and Inequality: The American Welfare State M W F\n5 AMST 205-01 10842                         Trans Theories and Politics  T R \n6 AMST 209-01 10474                   Civil Rights in the United States   W  \n             time      room             instructor avail_max\n1 9:40 - 10:40 am  MAIN 009       Daylanne English    3 / 20\n2  1:10 - 2:10 pm MUSIC 219          Jake Nagasawa   -4 / 16\n3  3:00 - 4:30 pm   HUM 214 Karin Aguilar-San Juan    0 / 14\n4 9:40 - 10:40 am  CARN 305          Lesley Lavery    3 / 25\n5  3:00 - 4:30 pm  MAIN 009              Myrl Beam   -2 / 20\n6 7:00 - 10:00 pm  MAIN 010         Walter Greason   -1 / 15\n```\n\n\n:::\n:::\n\n\n\n\n\nUse our more familiar wrangling tools to warm up.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Construct a table that indicates the number of classes offered in each day/time slot\n# Print only the 6 most popular time slots\n```\n:::\n\n\n\n\n\n\\\n\\\n\\\n\\\n\n### Exercise 2: Prep the data {.unnumbered}\n\nSo that we can analyze it later, we want to wrangle the `courses` data:\n\n-   Let's get some enrollment info:\n    -   Split `avail_max` into 2 separate variables: `avail` and `max`.\n    -   Use `avail` and `max` to define a new variable called `enrollment`. HINT: You'll need `as.numeric()`\n-   Split the course `number` into 3 separate variables: `dept`, `number`, and `section`. HINT: You can use `separate()` to split a variable into 3, not just 2 new variables.\n\nStore this as `courses_clean` so that you can use it later.\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\\\n\\\n\\\n\\\n\n### Exercise 3: Courses by department {.unnumbered}\n\nUsing `courses_clean`...\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Identify the 6 departments that offered the most sections\n\n\n# Identify the 6 departments with the longest average course titles\n```\n:::\n\n\n\n\n\n\\\n\\\n\\\n\\\n\n### Exercise 4: STAT courses {.unnumbered}\n\n#### Part a {.unnumbered}\n\nGet a subset of `courses_clean` that only includes courses taught by Alicia Johnson.\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n#### Part b {.unnumbered}\n\nCreate a new dataset from `courses_clean`, named `stat`, that only includes STAT sections. In this dataset:\n\n-   In the course names:\n\n    -   Remove \"Introduction to\" from any name.\n    -   Shorten \"Statistical\" to \"Stat\" where relevant.\n\n-   Define a variable that records the `start_time` for the course.\n\n-   Keep only the `number, name, start_time, enroll` columns.\n\n-   The result should have 18 rows and 4 columns.\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\\\n\\\n\\\n\\\n\n### Exercise 5: More cleaning {.unnumbered}\n\nIn the next exercises, we'll dig into enrollments. Let's get the data ready for that analysis here. Make the following changes to the `courses_clean` data. Because they have different enrollment structures, and we don't want to compare apples and oranges, *remove* the following:\n\n-   all sections in `PE` and `INTD` (interdisciplinary studies courses)\n\n-   all music ensembles and dance practicums, i.e. all MUSI and THDA classes with numbers less than 100. HINT: `!(dept == \"MUSI\" & as.numeric(number) < 100)`\n\n-   all lab sections. Be careful which variable you use here. For example, you don't want to search by \"Lab\" and accidentally eliminate courses with words such as \"Labor\".\n\nSave the results as `enrollments` (don't overwrite `courses_clean`).\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\\\n\\\n\\\n\\\n\n### Exercise 6: Enrollment & departments {.unnumbered}\n\nExplore enrollments by department. *You* decide what research questions to focus on. Use both visual and numerical summaries.\n\n\\\n\\\n\\\n\\\n\n### Exercise 7: Enrollment & faculty {.unnumbered}\n\nLet's now explore enrollments by instructor. In doing so, we have to be cautious of cross-listed courses that are listed under multiple different departments. Uncomment the code lines in the chunk below for an example.\n\n::: {.callout-tip title=\"Commenting/Uncommenting Code\"}\n\nTo comment/uncomment several lines of code at once, highlight them then click <kbd>ctrl/cmd+shift+c</kbd>.\n\n:::\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# enrollments |>\n#   filter(dept %in% c(\"STAT\", \"COMP\"), number == 112, section == \"01\")\n```\n:::\n\n\n\n\n\nNotice that these are the exact same section! In order to not double count an instructor's enrollments, we can keep only the courses that have `distinct()` *combinations* of `days, time, instructor` values.  Uncomment the code lines in the chunk below.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# enrollments_2 <- enrollments |> \n#   distinct(days, time, instructor, .keep_all = TRUE)\n\n# NOTE: By default this keeps the first department alphabetically\n# That's fine because we won't use this to analyze department enrollments!\n# enrollments_2 |> \n#   filter(instructor == \"Brianna Heggeseth\", name == \"Introduction to Data Science\")\n```\n:::\n\n\n\n\n\n*Now*, explore enrollments by instructor. *You* decide what research questions to focus on. Use both visual and numerical summaries.\n\nCAVEAT: The above code doesn't deal with *co-taught* courses that have more than one instructor. Thus instructors that co-taught are recorded as a pair, and their co-taught enrollments aren't added to their total enrollments. This is tough to get around with how the data were scraped as the instructor names are smushed together, not separated by a comma!\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\\\n\\\n\\\n\\\n\n### Optional extra practice {.unnumbered}\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make a bar plot showing the number of night courses by day of the week\n# Use courses_clean\n```\n:::\n\n\n\n\n\n\\\n\\\n\\\n\\\n\n### Dig Deeper: regex {.unnumbered}\n\nExample 4 gave 1 small example of a regular expression.\n\nThese are handy when we want process a string variable, but there's no consistent pattern by which to do this. You must think about the structure of the string and how you can use regular expressions to capture the patterns you want (and exclude the patterns you don't want).\n\nFor example, how would you describe the pattern of a 10-digit phone number? Limit yourself to just a US phone number for now.\n\n-   The first 3 digits are the area code.\n-   The next 3 digits are the exchange code.\n-   The last 4 digits are the subscriber number.\n\nThus, a regular expression for a US phone number could be:\n\n-   `[:digit:]{3}-[:digit:]{3}-[:digit:]{4}` which limits you to XXX-XXX-XXXX pattern or\n-   `\\\\([:digit:]{3}\\\\) [:digit:]{3}-[:digit:]{4}` which limits you to (XXX) XXX-XXXX pattern or\n-   `[:digit:]{3}\\\\.[:digit:]{3}\\\\.[:digit:]{4}` which limits you to XXX.XXX.XXXX pattern\n\nThe following would include the three patterns above in addition to the XXXXXXXXXX pattern (no dashes or periods): - `[\\\\(]*[:digit:]{3}[-.\\\\)]*[:digit:]{3}[-.]*[:digit:]{4}`\n\nIn order to write a regular expression, you first need to consider what patterns you want to include and exclude.\n\nWork through the following examples, and the tutorial after them to learn about the syntax.\n\n**EXAMPLES**\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define some strings to play around with\nexample <- \"The quick brown fox jumps over the lazy dog.\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_replace(example, \"quick\", \"really quick\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"The really quick brown fox jumps over the lazy dog.\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_replace_all(example, \"(fox|dog)\", \"****\") # | reads as OR\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"The quick brown **** jumps over the lazy ****.\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_replace_all(example, \"(fox|dog).\", \"****\") # \".\" for any character\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"The quick brown ****jumps over the lazy ****\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_replace_all(example, \"(fox|dog)\\\\.$\", \"****\") # at end of sentence only, \"\\\\.\" only for a period\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"The quick brown fox jumps over the lazy ****\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_replace_all(example, \"the\", \"a\") # case-sensitive only matches one\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"The quick brown fox jumps over a lazy dog.\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_replace_all(example, \"[Tt]he\", \"a\") # # will match either t or T; could also make \"a\" conditional on capitalization of t\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a quick brown fox jumps over a lazy dog.\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_replace_all(example, \"[Tt]he\", \"a\") # first match only\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a quick brown fox jumps over a lazy dog.\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# More examples\nexample2 <- \"Two roads diverged in a yellow wood, / And sorry I could not travel both / And be one traveler, long I stood / And looked down one as far as I could\"\nexample3 <- \"This is a test\"\n\n# Store the examples in 1 place\nexamples <- c(example, example2, example3)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npat <- \"[^aeiouAEIOU ]{3}\" # Regular expression for three straight consonants. Note that I've excluded spaces as well\n\nstr_detect(examples, pat) # TRUE/FALSE if it detects pattern\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE  TRUE FALSE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_subset(examples, pat) # Pulls out those that detects pattern\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"The quick brown fox jumps over the lazy dog.\"                                                                                                        \n[2] \"Two roads diverged in a yellow wood, / And sorry I could not travel both / And be one traveler, long I stood / And looked down one as far as I could\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npat2 <- \"[^aeiouAEIOU ][aeiouAEIOU]{2}[^aeiouAEIOU ]{1}\" # consonant followed by two vowels followed by a consonant\n\nstr_extract(example2, pat2) # extract first match\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"road\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_extract_all(example2, pat2, simplify = TRUE) # extract all matches\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1]   [,2]   [,3]   [,4]   [,5]   [,6]  \n[1,] \"road\" \"wood\" \"coul\" \"tood\" \"look\" \"coul\"\n```\n\n\n:::\n:::\n\n\n\n\n\n**TUTORIAL**\n\nTry out this [interactive tutorial](https://regexone.com/). Note that neither the tutorial nor regular expressions more generally are specific to `R`, but it still illustrates the main ideas of regular expressions.\n\n\\\n\\\n\\\n\\\n\n::: content-hidden\n## Wrap-up\n\n-   Our quiz is Tuesday. Remember to be on time and review the quiz info on the syllabus and quiz practice. For example, don't forget that you can bring an 8.5x11 note sheet with writing on both sides. You will hand this in.\n\n-   Due dates:\n\n    -   Homework 5 is due today\n    -   Homework 6 is due Tuesday, April 2 and will be posted tomorrow (after the Homework 5 due date). It's similar to Homework 3 -- you'll pick a new TidyTuesday dataset, make 3 plots, and some other minor changes. Thus you can start now!\n\n\\\n\\\n\\\n\\\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}