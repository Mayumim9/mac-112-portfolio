[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "COMP/STAT112 Notebook",
    "section": "",
    "text": "Introduction\nThis is my online notebook for COMP/STAT112 course taken at Macalester College. Please, use the side bar on the left for navigation.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "activities/README.html",
    "href": "activities/README.html",
    "title": "Activities",
    "section": "",
    "text": "All activities live here.",
    "crumbs": [
      "Activities"
    ]
  },
  {
    "objectID": "activities/Exercise_1.html",
    "href": "activities/Exercise_1.html",
    "title": "1  Exercise 1 - Welcome",
    "section": "",
    "text": "1.1 Background",
    "crumbs": [
      "Activities",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Exercise 1 - Welcome</span>"
    ]
  },
  {
    "objectID": "activities/Exercise_1.html#background",
    "href": "activities/Exercise_1.html#background",
    "title": "1  Exercise 1 - Welcome",
    "section": "",
    "text": "Data\nThe word data often brings spreadsheets to mind, like the following data on penguins.\n\n\n# A tibble: 5 × 6\n# Groups:   species, island [5]\n  species   island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;     &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie    Biscoe              37.8          18.3               174        3400\n2 Adelie    Dream               39.5          16.7               178        3250\n3 Adelie    Torgersen           39.1          18.7               181        3750\n4 Chinstrap Dream               46.5          17.9               192        3500\n5 Gentoo    Biscoe              46.1          13.2               211        4500",
    "crumbs": [
      "Activities",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Exercise 1 - Welcome</span>"
    ]
  },
  {
    "objectID": "activities/Exercise_1.html#exercises",
    "href": "activities/Exercise_1.html#exercises",
    "title": "1  Exercise 1 - Welcome",
    "section": "1.2 Exercises",
    "text": "1.2 Exercises\n\n\n\n\n\n\nGoals\n\n\n\nThe goal of these exercises are to:\n\nFamiliarize yourself with the RStudio layout.\nPlay around in the RStudio console to gain familiarity with the basic structure of R code.\n\n\n\n\n\n\n\n\n\nDirections\n\n\n\nBe Kind to Yourself\nWe will all make so many mistakes in RStudio! That’s part of learning any new language. If fact, mistakes are important to learning any new language.\nCollaborate\nWe are and will be sitting in groups for a reason. Collaboration improves higher-level thinking, confidence, communication, community, & more. You are expected to:\n\nActively contribute to discussion. Don’t work on your own.\nActively include all other group members in discussion.\nCreate a space where others feel comfortable making mistakes & sharing ideas.\nStay in sync while respecting that everybody has different learning strategies, work styles, note taking strategies, etc. If some people are working on exercise 10 and others on exercise 2, that’s not a good collaboration.\nDon’t rush. You won’t hand anything in and can finish up outside of class.\n\nGrow\nThis 100-level course assumes you have NO R experience, but welcomes all. Growth is expected of every student.\n\nIf you are new to R, I hope you leave class today simply feeling positive about opening RStudio.\nIf you are familiar with R, I hope you think more deeply about concepts you might have taken for granted in the past and support those new to R in your group. Explaining ideas to others deepens your own understanding and retention of these ideas.\n\nAsk Questions\nWe will not discuss these exercises as a class. Your group should ask me questions as I walk around the room.\n\n\n\nExercise 1: Open RStudio\n\nIf you already downloaded and installed a desktop version of RStudio on your laptop, open that.\nOtherwise, log on to Mac’s RStudio server using your usual Mac credentials: https://rstudio.macalester.edu/. For the purposes of everybody being in the same place, use this for now. You’ll be prompted to install the software later.\n\nNotice that there are four panes, each serving a different purpose. Today, we’ll work solely within the console and will not save any work.\n\n\nExercise 2: Use R as a calculator\nWe can do simple calculations in RStudio! Type the following lines in the console, one by one. After each line, hit your Return/Enter button and simply take note of what you get. In some cases you might even get an error! This error is important to learning how R code does and doesn’t work.\n\n4 + 2\n4/2\n4^2\n4*2\n4*(2)\n\n\n\n\n\n\n\nPause\n\n\n\nMake sure you’re still in sync with your group.\n\n\n\n\nExercise 3: Functions and arguments\nHaving a calculator is nice, but we’ll typically use built-in functions to perform common (repetitive) and specific tasks. These functions have names and require information about arguments in order to run:\nfunction(argument)\nTry out the following functions in your console. Note each function’s name, the argument or information it needs to run, and what output it produces (i.e. what the function does):\n\nsqrt(9)\nsqrt(25)\nnchar(\"snow\")\nnchar(\"macalester\")\nsqrt(nchar(\"snow\"))\n\nSome functions require more than 1 argument, separated by commas. To keep these straight, we often specify the arguments by name:\nfunction(argument1 = ___, argument2 = ___)\nTry out the following functions in your console, one by one. Note each function’s name, the arguments it needs to run, when it’s necessary to specify these arguments by name, and what output it produces.\n\nrep(x = 2, times = 5)\nrep(times = 5, x = 2)\nrep(2, 5)\nrep(5, 2)\nseq(from = 2, to = 10, by = 2)\nseq(2, 10, 2)\nseq(from = 2, to = 10, length = 3)\nseq(2, 10, 3)\n\nFinally, note that R is case sensitive. Try the following code which uses Seq() instead of seq(). Take time to read the error message. You will experience this type of error message a lot! It will happen any time you misspell a function (among other reasons we’ll experience later).\n\nSeq(2, 10, 3)\n\n\n\nExercise 4: Grammar\nWe’ll learn lots and lots of functions this semester. Nobody has every function memorized. That said, it does help to connect function names with their purpose. Do that for each function you used above.\n\nsqrt() = Square root\nnchar() = Number of characters\nrep() = Replicate\nseq() = Sequence generator\n\n\n\n\n\n\n\nPause\n\n\n\nMake sure you’re still in sync with your group.\n\n\n\n\nExercise 5: Your turn\nUse the functions you learned above to do the following:\n\nCount the number of letters in “data”.\n\n\nnchar(\"data\")\n\n[1] 4\n\n\n\nCreate the sequence 3, 6, 9, 12. You might do this 2 ways.\n\n\nseq(from = 3, to = 12, by = 3)\n\n[1]  3  6  9 12\n\n\n\nCreate a sequence of 4 numbers that start at 1 and end at 10. You might do this 2 ways.\n\n\nseq(from = 1, to = 10, by = 3)\n\n[1]  1  4  7 10\n\n\n\nRepeat the number “5” 8 times.\n\n\nrep(5, 8)\n\n[1] 5 5 5 5 5 5 5 5\n\n\n\nCHALLENGE: Combine 2 functions to produce the sequence 3, 6, 9, 12, 3, 6, 9, 12\n\n\nrep(seq(from = 3, to = 12, by = 3), 2)\n\n[1]  3  6  9 12  3  6  9 12\n\n\n\n\nExercise 6: Save it for later\nFor reasons that will quickly become clear, we’ll often want to store some R output for later using assignment operator as follows:\nname &lt;- output\nIn the above assignment statement:\n\nname is the name under which to store a result\noutput is the result we wish to store\n&lt;- is the assignment operator–you can think of this as an arrow pointing the output into the name.\n\nTry out each line one at a time. Some lines will show any output. Why?\n\ndegrees_c &lt;- -13\ndegrees_c\n\nLet’s now use what you stored! Again, do this one by one.\n\ndegrees_c * (9/5) + 32\ndegrees_f &lt;- degrees_c * (9/5) + 32\ndegrees_f\n\nFinally, try to print degrees_tomorrow. Take time to read the error message. You will experience this type of error message a lot! It will happen when you either haven’t yet defined the object you’re trying to use, or you’ve misspelled its name (among other reasons we’ll experience later).\n\ndegrees_tomorrow\n\n\n\n\n\n\n\nPause\n\n\n\nMake sure you’re still in sync with your group.\n\n\n\n\nExercise 7: Practice\n\nName and store your current age in years.\n\n\nmy_age &lt;- 21\n\n\nConfirm that your age is stored correctly by typing the name and pressing Return/Enter.\n\n\nmy_age\n\n[1] 21\n\n\n\nUse your stored age to calculate how old you’ll be in 17 years.\n\n\nmy_age + 17\n\n[1] 38\n\n\n\n\nExercise 8: Code = communication\nIt’s important to recognize from day 1 that code is a form of communication, both to yourself and others. Code structure and details are important to readability and clarity just as grammar, punctuation, spelling, paragraphs, and line spacing are important in written essays. All of the code below works, but has bad structure. With your group, discuss what is unfortunate about each line.\n\nseq(from=1,to=9,by=2)\nseq(from = 1, to=9,by=2)\nmy_output &lt;- -13\nthisisthetemperaturetodayincelsius &lt;- -13\nthis_is_the_temperature_today_in_celsius &lt;- -13\n\n\n\n\n\n\n\nStyling Tip: Avoid Smooshy Code\n\n\n\n\n# BAD: tough to read\nseq(from=1,to=9,by=2)\n\n# GOOD: spaces between \"words\" and punctuation helps\nseq(from = 1, to = 9, by = 2)\n\n\n\n\n\n\n\n\n\nNaming Tip: Use Good Naming Conventions\n\n\n\nWhen naming your variables:\n\nuse meaningful names,\nmake them short if possible\nsplit up multiple-word names using snake_case or camelCase\n\n\n# BAD: too smooshy and hard to read\ndegreescelsius &lt;- -13\n\n# BETTER but not the R-way of naming variables\n# Why is it called camel case?\ndegreesCelsius &lt;- -13\n\n# BETTER\ndegrees_celsius &lt;- -13\n\nIt’s also impossible, not just ill-advised to start names with numbers or symbols, or to use certain symbols in our names. Try the followings:\n\n1_18_24_degrees_c &lt;- -13\n_degrees_c &lt;- -13\nJan/18/24/degrees &lt;- -13\n\n\n\n\n\nExercise 9: You will make so many mistakes!\nMistakes are common when learning any new language. You’ll get better and better at interpreting error messages, finding help, and fixing errors. These are all important skills in computer programming in general.\n\n\n\n\n\n\nConsole Shortcut\n\n\n\nWith your cursor at the next prompt in the console (&gt;), press the up arrow multiple times. What does this do?! This shortcut will be very handy when you make mistakes and want to modify your code without having to start over.\n\n\n\n\n\n\n\n\nHelp Files\n\n\n\nYou’ll often forget how functions are used. Luckily, there’s typically built-in documentation for built-in functions that can be invoked using the ? operator.\n\n\nLet’s practice:\n\nIn the console, type ?rep and press Return/Enter.\nCheck out the documentation file that pops up in the Help tab (lower right).\nQuickly scroll through, noting the type of information provided.\nStop at the “Examples” at the bottom. Perhaps the most useful section, this is where a function’s functionality is demonstrated! Try out a couple of the provided examples in your console.\n\n\n\nExercise 10: History and environment\nFinally, let’s leave the console.\n\nCheck out the “Environment” tab in the top right pane of RStudio. What do you observe there and when might this be helpful?\nSimilarly, check out the “History” tab in the top right pane of RStudio. What do you observe there and when might this be helpful?\n\n\n\nOptional Excersise: Watch Explaination\nIf you’ve finished the above exercises, you can watch Dr. Alicia Johnson talks through the concepts learned today (YouTube).",
    "crumbs": [
      "Activities",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Exercise 1 - Welcome</span>"
    ]
  },
  {
    "objectID": "activities/Exercise_1.html#wrapping-up",
    "href": "activities/Exercise_1.html#wrapping-up",
    "title": "1  Exercise 1 - Welcome",
    "section": "1.3 Wrapping Up",
    "text": "1.3 Wrapping Up\n\nIf you didn’t finish the activity, make sure to complete it outside of class\nReview the solutions at the bottom of the page\nCheck your understanding of the content by solving checkpoint 1 in Moodle",
    "crumbs": [
      "Activities",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Exercise 1 - Welcome</span>"
    ]
  },
  {
    "objectID": "activities/Exercise_1.html#solutions",
    "href": "activities/Exercise_1.html#solutions",
    "title": "1  Exercise 1 - Welcome",
    "section": "1.4 Solutions",
    "text": "1.4 Solutions\n\n\nClick for Solutions\n\n\nExercise 2: Use R as a calculator\n\n4 + 2\n\n[1] 6\n\n4/2\n\n[1] 2\n\n4^2\n\n[1] 16\n\n4*2\n\n[1] 8\n\n\n\n# This code gives an error! Multiplication requires *\n4(2)\n\n\n\nExercise 3: Functions and arguments\n\n# sqrt calculates square root\nsqrt(9)\n\n[1] 3\n\nsqrt(25)\n\n[1] 5\n\n# nchar counts up the number of characters\nnchar(\"cat\")\n\n[1] 3\n\nnchar(\"macalester\")\n\n[1] 10\n\n\n\n# rep repeats the value \"x\" the number of \"times\" indicated\n# Order doesn't matter\nrep(x = 2, times = 5)\n\n[1] 2 2 2 2 2\n\nrep(times = 5, x = 2)\n\n[1] 2 2 2 2 2\n\n# We don't need to label the arguments\n# But the order matters! It assumes an order of \"x\" then \"times\"\nrep(2, 5)\n\n[1] 2 2 2 2 2\n\nrep(5, 2)\n\n[1] 5 5\n\n# Create a sequence of numbers\n# Removing the argument labels gives the same result \nseq(from = 2, to = 10, by = 2)\n\n[1]  2  4  6  8 10\n\nseq(2, 10, 2)\n\n[1]  2  4  6  8 10\n\n# We can also define a sequence by its length, not increments\n# But can't remove the argument labels (R assumes the 3rd argument is length)\nseq(from = 2, to = 10, length = 3)\n\n[1]  2  6 10\n\nseq(2, 10, 3)\n\n[1] 2 5 8\n\n\n\n\nExercise 4: Grammar\n\nsqrt() = square root\nnchar() = number of characters\nrep() = repeat / repetition\nseq() = sequence\n\n\n\nExercise 5: Your turn\n\n# Count the number of letters in \"data\"\nnchar(\"data\")\n\n[1] 4\n\n# Create the sequence 3, 6, 9, 12\nseq(from = 3, to = 12, by = 3)\n\n[1]  3  6  9 12\n\nseq(from = 3, to = 12, length = 4)\n\n[1]  3  6  9 12\n\n# Create a sequence of 4 numbers that start at 1 and end at 10\nseq(from = 1, to = 10, length = 4)\n\n[1]  1  4  7 10\n\nseq(from = 1, to = 10, by = 3)\n\n[1]  1  4  7 10\n\n# Repeat the number \"5\" 8 times\nrep(x = 5, times = 8)\n\n[1] 5 5 5 5 5 5 5 5\n\nrep(5, 8)\n\n[1] 5 5 5 5 5 5 5 5\n\n# Combine 2 functions to produce the sequence 3, 6, 9, 12, 3, 6, 9, 12\nrep(x = seq(from = 3, to = 12, by = 3), times = 2)\n\n[1]  3  6  9 12  3  6  9 12\n\n\n\n\nExercise 6: Save it for later\n\ndegrees_c &lt;- -13\ndegrees_c\n\n[1] -13\n\ndegrees_c * (9/5) + 32\n\n[1] 8.6\n\ndegrees_f &lt;- degrees_c * (9/5) + 32\ndegrees_f\n\n[1] 8.6\n\n\n\n\nExercise 7: Practice\n\nmy_age &lt;- 20\nmy_age\n\n[1] 20\n\nmy_age + 17\n\n[1] 37\n\n\n\n\nExercise 8: Code = communication\n\n# This is too smooshy and hard to read\nseq(from=1,to=9,by=2)\n\n# The use of spacing is inconsistent, hence hard to read\nseq(from = 1, to=9,by=2)\n\n# Too vague\nmy_output &lt;- -13\n\n# Too smooshy\nthisisthetemperaturetodayincelsius &lt;- -13\n\n# Easier to read, but too long\nthis_is_the_temperature_today_in_celsius &lt;- -13\n\n\n\nExercise 10: History and environment\n\nEnvironment: shows what objects you’ve stored (eg: degrees_c)\nHistory: shows what R code you’ve typed",
    "crumbs": [
      "Activities",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Exercise 1 - Welcome</span>"
    ]
  },
  {
    "objectID": "activities/Exercise_2.html",
    "href": "activities/Exercise_2.html",
    "title": "2  Exercise 2 - RStudio Workshop",
    "section": "",
    "text": "2.1 Warm-up",
    "crumbs": [
      "Activities",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Exercise 2 - RStudio Workshop</span>"
    ]
  },
  {
    "objectID": "activities/Exercise_2.html#warm-up",
    "href": "activities/Exercise_2.html#warm-up",
    "title": "2  Exercise 2 - RStudio Workshop",
    "section": "",
    "text": "Background\n\nWhat’s the point of this course?\nBuild knowledge from data within a particular domain of inquiry, and particular contexts.\n\n\nWhy will we use R/RStudio as a tool in this course?\n\nIt’s open access, ie, free!\nIt’s open source, ie, anyone can contribute to its development\nIt’s used broadly–here are some examples where R is used:\n\nLogan Pratico: making “eviction data accessible to the legal aid community”\nAhmadou Dicko: humanitarians creating “life saving data products”\nShelmith Kariuki: Kenyan government census\nLaura DeCicco: U.S. Geological Survey (USGS) discovery and retrieval of hydrologic data\nNick Snellgrove & Uli Muellner: studying aquatic invasive species in MN\n\n\n\n\nRStudio Layout\nBelow is a screenshot of the default layout for RStudio.\n\n\nConsole\nLast class, we spent most of our time in the console. However,\n\n\n\n\n\n\n\nConsole is good for…\nConsole is bad for most everything else, including…\n\n\n\n\nquick calculations\ndocumenting our work\n\n\ntrying out code\nediting our work\n\n\npulling up help files\ncommunicating our work\n\n\n\nbeing able to reproduce our work\n\n\n\n\n\n\nQuarto\n\nReproducibility with Quarto\nIt’s important to document and communicate every step in the data analysis process, e.g. data collection, cleaning, and analysis, so that others and ourselves can reproduce and hence verify and build upon our work.\nRStudio includes tools for creating reproducible and lovely documents, webpages, books (like this online manual!), etc that allow us to interleave text, code, output, images, tables, etc. Quarto is integrated into RStudio and if you’ve used R Markdown, it looks very similar.\n\n\n\n\n\n\nQuarto\n\n\n\nQuarto is an technology that incorporates code from many programming languages such as R along with styled text (headers, bold, italics, links, etc.) using markdown.\n\n\n\n\nQuarto Example\nDownload then move this Quarto document into the activities folder of your portfolio project and do not forgot to include it in _quarto.yml file. Open the Quarto document in RStudio and follow the prompts therein. Note that this document explores the basics. We’ll pick up more details as we go, often by making and learning from mistakes. The Quarto cheatsheets linked at the top of this chapter presents more features of Quarto.\n\n\n\nImportant Tips\n\nQuarto Files (.qmd) vs Console\n\nThe console does not communicate with Quarto. Things you define or type in the console are NOT defined, stored, or run in the .qmd.\nQuarto can communicate with the console, but only if you tell it to.\n\nIT WILL: if you run a chunk inside your .qmd (by clicking the green arrow), it is also run and stored in the console.\nIT WON’T: if you render your .qmd to html but do not also run the chunks inside the .qmd, the results will be displayed in the html but not run or stored in the console.\n\n\n\n\nComments\nLeaving short notes (known as comments) about what our code is doing is an important aspect of communication. It reminds our future selves, and communicates to others, what our thought and code process was. Hence comments are important to reproducibility. In the R chunks, comments are proceeded by a pound sign: # This is an example comment.\n\n\n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\n\nFigure 2.1: Left: Leaving comments can feel silly in the moment (Reddit source). Right: But your future self and others will thank you (quickmeme source).\n\n\n\n\n\nStyling Guides\nAll of this emphasis on communication is not specific to this class, it is a general expectation. Further, the code structure we’ll use this semester reflects common practice, but not the only practice. Various companies / entities have their own R “style guides”. Below are two examples of such styling guides.\n\ntidyverse style guide\n\nR developers like using the snake_case when naming variables\n\nGoogle’s R Style Guide\n\nGoogle on the other hand recommends using the camelCase when naming variables",
    "crumbs": [
      "Activities",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Exercise 2 - RStudio Workshop</span>"
    ]
  },
  {
    "objectID": "activities/Exercise_2.html#homework-1",
    "href": "activities/Exercise_2.html#homework-1",
    "title": "2  Exercise 2 - RStudio Workshop",
    "section": "2.2 Homework 1",
    "text": "2.2 Homework 1\n\n\n\n\n\n\nInstructions, Reminder\n\n\n\n\nThe following exercises will be due as homework 1.\nYou should work on these exercises in groups, but write up your own work.\n\n\n\n\nGetting Started\nFor most homeworks and in-class activities, you will be provided with a Quarto (.qmd) template. However, it’s also important to practice starting your own Quarto .qmd from scratch. You’ll do that here.\n\n\n\n\n\n\nInstructions\n\n\n\nBefore starting the exercises, take the following steps:\n\nFollow the instructions on Appendix: Submitting Homeworks to create your homework repository\nIn the homeworks folder of your cloned repository, create a new Quarto (.qmd) file: File window in the lower-right corner –&gt; Add New File (second icon from the left) –&gt; Quarto Doc… –&gt; name it homework_01.qmd\nEdit the_quarto.yml file to include the document\nIn the newly created document, add the following YAML header at the top. The YAML option number-sections will prevent numbering the headers of the documents.\n---\ntitle: \"Homework 1\"\nnumber-sections: false\n---\nBelow the yaml header, add section headers for each homework exercise as follows:\n## Exercise 1: Warming up\n\n\n## Exercise 2: Import tidy data\n\n\n## Exercise 3: Tidy data properties\n\n\n## Exercise 4: Get to know the data\n\n\n## Exercise 5: Data structure\n\n\n## Exercise 6: Your turn\n\n\n## Exercise 7: Brainstorm\nRender the book to html by clicking Render Book button in the Build located in the upper-right section.\nPut your answers to each exercise under the appropriate # Exercise section. You do not need to write out the question/prompt itself.\n\n\n\n\n\nExercise 1: Warming Up\n\nWrite 1 sentence about one of your favorite foods at Cafe Mac. Make sure to include an italicized word and a bold word.\nShow a .png image of the food from the web. In Google, you can add filetype:png to the beginning of your search term, click on the photo you want, and copy the image address.\n\n\n\n\n\n\n\nCheck → Commit → Push\n\n\n\nBefore continuing, click Render Book again and make sure it looks like what you want. If happy, jump to GitHub Desktop and commit the changes with the message Finish HW1 Ex1 and push to GitHub.\n\n\n\n\nExercise 2: Import Tidy Data\nA quick survey was filled before class. So, let’s work with this data. The first step to working with data in RStudio is getting it in there which depends on:\n\nfile format, eg, .xls (Excel spreadsheet), .csv, or .txt\nstorage locations, eg, online, on your desktop, or built into RStudio itself.\n\nOur data is stored as a .csv file online. Within a new R chunk, import and store this data as survey. Take note of the function name and the argument it takes.\n\n# Import the data\nsurvey &lt;- read.csv(\"https://mac-stat.github.io/data/112_fall_2024_survey.csv\")\n\nNote that nothing new appears in your document after you import the data. This is because we stored, but didn’t print, the data. Actually, we don’t want to print the data in our .qmd file–it would be too messy.\nThere are 2 quick ways to check out the entire data table to get a sense of its structure and contents:\n\nType View(survey) in the console.\nIn the Environment tab (upper right pane), click on survey.\n\n\n\n\n\n\n\nCheck → Commit → Push\n\n\n\nBefore continuing, click Render Book again and make sure it looks like what you want. If happy, jump to GitHub Desktop and commit the changes with the message Finish HW1 Ex2 and push to GitHub.\n\n\n\n\nExercise 3: Tidy Data Properties\nAnswers the following prompts in a bulleted list in the order they’re presented.\n\nWhat are the units of observation, ie, what does each row represent?\nName one quantitative variable, ie, column, in the dataset.\nName one categorical variable, ie, column, in the dataset.\n\n\n\n\n\n\n\nCreating Bulleted List\n\n\n\nTo create a bulleted list, use - in front of each item and make sure to leave an empty line before the list.\n\n\n\n\n\n\n\n\nCheck → Commit → Push\n\n\n\nBefore continuing, click Render Book again and make sure it looks like what you want. If happy, jump to GitHub Desktop and commit the changes with the message Finish HW1 Ex3 and push to GitHub.\n\n\n\n\nExercise 4: Know the Data\nBefore we can learn anything from our data, we must understand its structure. For each function below, try out one at a time then write a short comment/note about what the function does in the indicated places. To make for easier recall later, try to connect your comment on what the function does to how it’s named.\n\n# Replace this with a comment on what dim() does\ndim(survey)\n\n# Replace this with a comment on what nrow() does\nnrow(survey)\n\n# Replace this with a comment on what head() does\nhead(survey)\n\n# Replace this with a comment on what head(___, 3) does\nhead(survey, 3)\n\n# Replace this with a comment on what tail() does\ntail(survey)\n\n# Replace this with a comment on what names() does\nnames(survey)\n\n\n\n\n\n\n\nCheck → Commit → Push\n\n\n\nBefore continuing, click Render Book again and make sure it looks like what you want. If happy, jump to GitHub Desktop and commit the changes with the message Finish HW1 Ex4 and push to GitHub.\n\n\n\n\nExercise 5: Data Structure\nIt’s important that we understand the different types or structures of the objects we store. Having such information will inform what types of analyses are appropriate and the appropriate R code for these analyses. The class() function is important here. The example below shows how it can be used and what output it produces.\n\nx &lt;- 3\nclass(x)\n\n[1] \"numeric\"\n\ny &lt;- \"pizza\"\nclass(y)\n\n[1] \"character\"\n\n\nThere are various object classes, including:\n\nnum or numeric\nint or integer\nchr or character\nfactor, and\ndata.frame.\n\nComplete the chunk below to explore the classes/structure of our survey data and the variables within the survey data:\n\n# Obtain the overall class of the survey object\n\n\n# Examine the structure of each variable within survey (including class)\n# Just take note of what information we gain here (no need to write more)\nstr(survey)\n\n\n\n\n\n\n\nCheck → Commit → Push\n\n\n\nBefore continuing, click Render Book again and make sure it looks like what you want. If happy, jump to GitHub Desktop and commit the changes with the message Finish HW1 Ex5 and push to GitHub.\n\n\n\n\nExercise 6: Your turn\nLet’s practice these same ideas using data on World Cup football/soccer found on:\nhttps://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-11-29/worldcups.csv\nData is only useful if we know what it’s measuring! You can find a codebook, i.e. document that describes the data, here. Address each prompt below using R functions. Include both the # prompt and your code in the chunk.\n\n# Import and name the dataset (you pick a name!)\n\n\n# Print the first 6 rows of the dataset\n\n\n# How many years of data do we have? And how many measurements do we have on each year?\n\n\n# Get a list of all variable names in the dataset\n\n\n# Display the class and other information for each variable in the dataset\n\n\n\n\n\n\n\nCheck → Commit → Push\n\n\n\nBefore continuing, click Render Book again and make sure it looks like what you want. If happy, jump to GitHub Desktop and commit the changes with the message Finish HW1 Ex6 and push to GitHub.\n\n\n\n\nExercise 7: Brainstorm\nWe’ve just scratched the surface. In a bulleted list (-), write out 3 questions about the World Cup that we might answer using these data. Be creative. The questions don’t have to be questions we’ve learned how to answer yet.\n\n\n\n\n\n\nCheck → Commit → Push\n\n\n\nBefore continuing, click Render Book again and make sure it looks like what you want. If happy, jump to GitHub Desktop and commit the changes with the message Finish HW1 Ex7 and push to GitHub.\n\n\n\n\n\n\n\n\nCheck GitHub\n\n\n\nGo to your repository on GitHub (GitHub Desktop → Repository menu item → View on GitHub) and make sure that all your commits are there.\n\n\nCongratulation 🎉. You’re done with Homework 1.\n\n\nOptional: More Challenges\nIf you like to do more, here are some things to think about–this will be different from student to student based on current R experience, post-graduate goals, interests, etc.\nIf you are thinking about communication including aesthetics:\n\nCheck out other features of Quarto, shown in the Quarto Start up Guide linked at the top of this chapter\nCheck out the different themes or ways you might style a Quarto document.\nCheck out this gallery of Quarto websites (and other documents) and learn how to build Quarto websites right from RStudio.\n\nIf you are thinking about data, there are many places where you can get some. Actually, the World Cup data came from a weekly social data project called TidyTuesday. TidyTuesday is a community of R users from around the globe who share and dig into one different dataset per week then share their results in various channels such as YouTube and social media. Check out the repository of the TidyTuesday datasets at https://github.com/rfordatascience/tidytuesday. In the DataSets section, click on the year and then scroll down to a table of datasets posted that year. Pick a dataset of interest, import this into R, and play around! Be creative.",
    "crumbs": [
      "Activities",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Exercise 2 - RStudio Workshop</span>"
    ]
  },
  {
    "objectID": "activities/Exercise_2.html#footnotes",
    "href": "activities/Exercise_2.html#footnotes",
    "title": "2  Exercise 2 - RStudio Workshop",
    "section": "",
    "text": "Lisa Lendway is a Mac alum, former Mac prof who helped shape this course, and R/RStudio whiz.↩︎",
    "crumbs": [
      "Activities",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Exercise 2 - RStudio Workshop</span>"
    ]
  },
  {
    "objectID": "activities/Exercise_3.html",
    "href": "activities/Exercise_3.html",
    "title": "3  Exercise 3 - Univariate Viz",
    "section": "",
    "text": "4 Background\nWe’re starting our unit on data visualization or data viz, thus skipping some steps in the data science workflow. Mainly, it’s tough to understand how our data should be prepared before we have a sense of what we want to do with this data!\nSource",
    "crumbs": [
      "Activities",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Exercise 3 - Univariate Viz</span>"
    ]
  },
  {
    "objectID": "activities/Exercise_3.html#the-importance-of-visualizations",
    "href": "activities/Exercise_3.html#the-importance-of-visualizations",
    "title": "3  Exercise 3 - Univariate Viz",
    "section": "5.1 The importance of visualizations",
    "text": "5.1 The importance of visualizations\nEXAMPLE 1\nThe data below includes information on hiking trails in the 46 “high peaks” in the Adirondack mountains of northern New York state. This includes data on the hike’s highest elevation (feet), vertical ascent (feet), length (miles), time in hours that it takes to complete, and difficulty rating. Open this data in a viewer, through the Environment tab or by typing View(hikes) in the console.\n\n# Import data\nhikes &lt;- read.csv(\"https://mac-stat.github.io/data/high_peaks.csv\")\n\nTell me about the patterns and trends in hiking trail elevation. What about the the relationship between a hike’s elevation and the typical time it takes to summit / reach the top?\n\n\n\n\n\nEXAMPLE 2\nWhat if this New York Times article tried telling this story without using data viz? What would that story be like?\n\n\n\n\n\n\nBenefits of visualization\n\nUnderstand what we’re working with:\n\nscales & typical outcomes\noutliers, i.e. unusual cases\npatterns & relationships\n\nRefine research questions & inform next steps of our analysis.\nCommunicate our findings and tell a story.",
    "crumbs": [
      "Activities",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Exercise 3 - Univariate Viz</span>"
    ]
  },
  {
    "objectID": "activities/Exercise_3.html#components-of-data-graphics",
    "href": "activities/Exercise_3.html#components-of-data-graphics",
    "title": "3  Exercise 3 - Univariate Viz",
    "section": "5.2 Components of data graphics",
    "text": "5.2 Components of data graphics\nEXAMPLE 3\nData viz is the process of mapping data to different plot components. For example, in the NYT example above, the research team mapped data like the following (but with many more rows!) to the plot:\n\n\n\nobservation\ndecade\nyear\ndate\nrelative temp\n\n\n\n\n1\n2020-30\n2023\n1/23\n1.2\n\n\n2\n1940-60\n1945\n3/45\n-0.05\n\n\n\nWrite down step-by-step directions to use a data table like this one to create the temperature visualization. A computer is your audience. Thus be as precise as possible, but trust that the computer can find the exact numbers if you tell it where.\n\n\n\n\n\nCOMPONENTS OF GRAPHICS\nIn data viz, we essentially start with a blank canvas and then map data onto it. There are multiple possible mapping components. Some basics from Wickham (which goes into more depth):\n\na frame, or coordinate system\nThe variables or features that define the axes and gridlines of the canvas.\na layer\nThe geometric elements (e.g. lines, points) we add to the canvas to represent either the data points themselves or patterns among the data points. Each type of geometric element is a separate layer. These geometric elements are sometimes called “geoms” or “glyphs” (like heiroglyph!)\nscales\nThe aesthetics we might add to geometric elements (e.g. color, size, shape) to incorporate additional information about data scales or groups.\nfaceting\nThe splitting up of the data into multiple subplots, or facets, to examine different groups within the data.\na theme\nAdditional controls on the “finer points” of the plot aesthetics, (e.g. font type, background, color scheme).\n\n\n\n\n\n\nEXAMPLE\nIn the NYT graphic, the data was mapped to the plot as follows:\n\nframe: x-axis = date, y-axis = temp\nlayers: add one line per year, add dots for each month in 2023\nscales: color each line by decade\nfaceting: none\na theme: NYT style",
    "crumbs": [
      "Activities",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Exercise 3 - Univariate Viz</span>"
    ]
  },
  {
    "objectID": "activities/Exercise_3.html#ggplot-r-packages",
    "href": "activities/Exercise_3.html#ggplot-r-packages",
    "title": "3  Exercise 3 - Univariate Viz",
    "section": "5.3 ggplot + R packages",
    "text": "5.3 ggplot + R packages\nWe will use the powerful ggplot tools in RStudio to build (most of) our viz. The gg here is short for the “grammar of graphics”. These tools are developed in a way that:\n\nrecognizes that code is communication (it has a grammar!)\nconnects code to the components / philosophy of data viz\n\n\n\n\nEXAMPLE: ggplot in the news\n\nMPR journalist David Montgomery: R data viz\nBBC R data viz\n\n\n\n\nTo use these tools, we must first get them into R/RStudio! Recall that R is open source. Anybody can build R tools and share them through special R packages. The tidyverse package compiles a set of individual packages, including ggplot2, that share a common grammar and structure. Though the learning curve can be steep, this grammar is intuitive and generalizable once mastered. Image source: Posit BBC on X\n\nFollow the directions below to install this package, the directions depending upon whether or not you’re working on Mac’s server. Unless the authors of a package add updates, you only need to do this once all semester. To install:\n\nIf you’re working on Mac’s RStudio server\ntidyverse is already installed on the server! Check this 2 ways.\n\nType library(tidyverse) in your console. If you don’t get an error, it’s installed!\nCheck that it appears in the list under the “Packages” tab (bottom right pane).\n\nIf you’re working with a desktop version of R/RStudio\nIn the “Packages” tab (bottom right pane), click “Install”. From there type the name of the package (tidyverse), make sure the “Install dependencies” box is checked, and click “Install”.",
    "crumbs": [
      "Activities",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Exercise 3 - Univariate Viz</span>"
    ]
  },
  {
    "objectID": "activities/Exercise_3.html#exercise-1-research-questions",
    "href": "activities/Exercise_3.html#exercise-1-research-questions",
    "title": "3  Exercise 3 - Univariate Viz",
    "section": "Exercise 1: Research questions",
    "text": "Exercise 1: Research questions\nLet’s dig into the hikes data, starting with the elevation and difficulty ratings of the hikes:\n\nhead(hikes)\n\n             peak elevation difficulty ascent length time    rating\n1     Mt. Marcy        5344          5   3166   14.8 10.0  moderate\n2 Algonquin Peak       5114          5   2936    9.6  9.0  moderate\n3   Mt. Haystack       4960          7   3570   17.8 12.0 difficult\n4   Mt. Skylight       4926          7   4265   17.9 15.0 difficult\n5 Whiteface Mtn.       4867          4   2535   10.4  8.5      easy\n6       Dix Mtn.       4857          5   2800   13.2 10.0  moderate\n\n\n\nWhat features would we like a visualization of the categorical difficulty rating variable to capture?\n\nA bar graph would best visualize the rating difficulties because there are only three measurements.\n\nWhat about a visualization of the quantitative elevation variable?\n\nA histogram would best visualize the contrast between the elevations.",
    "crumbs": [
      "Activities",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Exercise 3 - Univariate Viz</span>"
    ]
  },
  {
    "objectID": "activities/Exercise_3.html#exercise-2-load-tidyverse",
    "href": "activities/Exercise_3.html#exercise-2-load-tidyverse",
    "title": "3  Exercise 3 - Univariate Viz",
    "section": "Exercise 2: Load tidyverse",
    "text": "Exercise 2: Load tidyverse\nWe’ll address the above questions using ggplot tools. Try running the following chunk and simply take note of the error message – this is one you’ll get a lot!\n\n# Use the ggplot function\nggplot(hikes, aes(x = rating))\n\nIn order to use ggplot tools, we have to first load the tidyverse package in which they live. Mainly, we’ve installed the package but need to tell R when we want to use it. Run the chunk below to load the library. You’ll need to do this within any .qmd file that uses ggplot().\n\n# Load the package\nlibrary(tidyverse)",
    "crumbs": [
      "Activities",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Exercise 3 - Univariate Viz</span>"
    ]
  },
  {
    "objectID": "activities/Exercise_3.html#exercise-3-bar-chart-of-ratings-part-1",
    "href": "activities/Exercise_3.html#exercise-3-bar-chart-of-ratings-part-1",
    "title": "3  Exercise 3 - Univariate Viz",
    "section": "Exercise 3: Bar chart of ratings (part 1)",
    "text": "Exercise 3: Bar chart of ratings (part 1)\nConsider some specific research questions about the difficulty rating of the hikes:\nHow many hikes fall into each category? Are the hikes evenly distributed among these categories, or are some more common than others?\nAll of these questions can be answered with: (1) a bar chart; of (2) the categorical data recorded in the rating column. First, set up the plotting frame:\n\nggplot(hikes, aes(x = rating))\n\n\n\n\n\n\n\n\nThink about:\n\nWhat did this do? What do you observe?\nWhat, in general, is the first argument of the ggplot() function?\nWhat is the purpose of writing x = rating?\nWhat do you think aes stands for?!?",
    "crumbs": [
      "Activities",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Exercise 3 - Univariate Viz</span>"
    ]
  },
  {
    "objectID": "activities/Exercise_3.html#exercise-4-bar-chart-of-ratings-part-2",
    "href": "activities/Exercise_3.html#exercise-4-bar-chart-of-ratings-part-2",
    "title": "3  Exercise 3 - Univariate Viz",
    "section": "Exercise 4: Bar chart of ratings (part 2)",
    "text": "Exercise 4: Bar chart of ratings (part 2)\nNow let’s add a geometric layer to the frame / canvas, and start customizing the plot’s theme. To this end, try each chunk below, one by one. In each chunk, make a comment about how both the code and the corresponding plot both changed.\nNOTE:\n\nPay attention to the general code properties and structure, not memorization.\nNot all of these are “good” plots. We’re just exploring ggplot.\n\n\n# The data was added within the frame for difficulty ratings of each hike. \nggplot(hikes, aes(x = rating)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n# This data is comparing the number of hikes and the difficulty rating. \nggplot(hikes, aes(x = rating)) +\n  geom_bar() +\n  labs(x = \"Rating\", y = \"Number of hikes\")\n\n\n\n\n\n\n\n\n\n# This histogram is comparing the number of hikes and difficulty rating and simultaneously filling the bars with blue. \nggplot(hikes, aes(x = rating)) +\n  geom_bar(fill = \"blue\") +\n  labs(x = \"Rating\", y = \"Number of hikes\")\n\n\n\n\n\n\n\n\n\n# This histogram does the same as the last chart but outlines the bars in orange. \nggplot(hikes, aes(x = rating)) +\n  geom_bar(color = \"orange\", fill = \"blue\") +\n  labs(x = \"Rating\", y = \"Number of hikes\")\n\n\n\n\n\n\n\n\n\n# This turned the background white. \nggplot(hikes, aes(x = rating)) +\n  geom_bar(color = \"orange\", fill = \"blue\")  +\n  labs(x = \"Rating\", y = \"Number of hikes\") +\n  theme_minimal()",
    "crumbs": [
      "Activities",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Exercise 3 - Univariate Viz</span>"
    ]
  },
  {
    "objectID": "activities/Exercise_3.html#exercise-5-bar-chart-follow-up",
    "href": "activities/Exercise_3.html#exercise-5-bar-chart-follow-up",
    "title": "3  Exercise 3 - Univariate Viz",
    "section": "Exercise 5: Bar chart follow-up",
    "text": "Exercise 5: Bar chart follow-up\n\nPart a\nReflect on the ggplot() code.\n\nWhat’s the purpose of the +? When do we use it?\nThe plus is to add layers to your ggplot.\nWe added the bars using geom_bar()? Why “geom”?\nGeom refers to the geometric object we use to visualize the data.\nWhat does labs() stand for?\nLabels, you can modify ggplot labels with this function.\nWhat’s the difference between color and fill?\nColor outlines while fill fills in the entire shape.\n\n\n\nPart b\nIn general, bar charts allow us to examine the following properties of a categorical variable:\n\nobserved categories: What categories did we observe?\nThere are more moderate hikes and less difficult ones.\nvariability between categories: Are observations evenly spread out among the categories, or are some categories more common than others?\nThe moderate category is more common, so they are not spread evenly.\n\nWe must then translate this information into the context of our analysis, here hikes in the Adirondacks. Summarize here what you learned from the bar chart, in context.\nMost hikes in the Adirondacks are moderate, second most are easy, and the least amount of hikes are difficult.\n\n\nPart c\nIs there anything you don’t like about this barplot? For example: check out the x-axis again.",
    "crumbs": [
      "Activities",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Exercise 3 - Univariate Viz</span>"
    ]
  },
  {
    "objectID": "activities/Exercise_3.html#exercise-6-sad-bar-chart",
    "href": "activities/Exercise_3.html#exercise-6-sad-bar-chart",
    "title": "3  Exercise 3 - Univariate Viz",
    "section": "Exercise 6: Sad bar chart",
    "text": "Exercise 6: Sad bar chart\nLet’s now consider some research questions related to the quantitative elevation variable:\nAmong the hikes, what’s the range of elevation and how are the hikes distributed within this range (e.g. evenly, in clumps, “normally”)? What’s a typical elevation? Are there any outliers, i.e. hikes that have unusually high or low elevations?\nHere:\n\nConstruct a bar chart of the quantitative elevation variable.\nExplain why this might not be an effective visualization for this and other quantitative variables. (What questions does / doesn’t it help answer?)",
    "crumbs": [
      "Activities",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Exercise 3 - Univariate Viz</span>"
    ]
  },
  {
    "objectID": "activities/Exercise_3.html#exercise-7-a-histogram-of-elevation",
    "href": "activities/Exercise_3.html#exercise-7-a-histogram-of-elevation",
    "title": "3  Exercise 3 - Univariate Viz",
    "section": "Exercise 7: A histogram of elevation",
    "text": "Exercise 7: A histogram of elevation\nQuantitative variables require different viz than categorical variables. Especially when there are many possible outcomes of the quantitative variable, it’s typically insufficient to simply count up the number of times we’ve observed a particular outcome (as the bar graph did above). It gives us a sense of ranges and typical outcomes, but not a good sense of how the observations are distributed across this range. We’ll explore two methods for graphing quantitative variables: histograms and density plots.\nHistograms are constructed by (1) dividing up the observed range of the variable into ‘bins’ of equal width; and (2) counting up the number of cases that fall into each bin. Check out the example below:\n\n\nPart a\nLet’s dig into some details.\n\nHow many hikes have an elevation between 4500 and 4700 feet?\nHow many total hikes have an elevation of at least 5100 feet?\n\n\n\nPart b\nNow the bigger picture. In general, histograms allow us to examine the following properties of a quantitative variable:\n\ntypical outcome: Where’s the center of the data points? What’s typical?\nvariability & range: How spread out are the outcomes? What are the max and min outcomes?\nshape: How are values distributed along the observed range? Is the distribution symmetric, right-skewed, left-skewed, bi-modal, or uniform (flat)?\noutliers: Are there any outliers, i.e. outcomes that are unusually large/small?\n\nWe must then translate this information into the context of our analysis, here hikes in the Adirondacks. Addressing each of the features in the above list, summarize here what you learned from the histogram, in context.",
    "crumbs": [
      "Activities",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Exercise 3 - Univariate Viz</span>"
    ]
  },
  {
    "objectID": "activities/Exercise_3.html#exercise-8-building-histograms-part-1",
    "href": "activities/Exercise_3.html#exercise-8-building-histograms-part-1",
    "title": "3  Exercise 3 - Univariate Viz",
    "section": "Exercise 8: Building histograms (part 1)",
    "text": "Exercise 8: Building histograms (part 1)\n2-MINUTE CHALLENGE: Thinking of the bar chart code, try to intuit what line you can tack on to the below frame of elevation to add a histogram layer. Don’t forget a +. If it doesn’t come to you within 2 minutes, no problem – all will be revealed in the next exercise.\n\nggplot(hikes, aes(x = elevation))",
    "crumbs": [
      "Activities",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Exercise 3 - Univariate Viz</span>"
    ]
  },
  {
    "objectID": "activities/Exercise_3.html#exercise-9-building-histograms-part-2",
    "href": "activities/Exercise_3.html#exercise-9-building-histograms-part-2",
    "title": "3  Exercise 3 - Univariate Viz",
    "section": "Exercise 9: Building histograms (part 2)",
    "text": "Exercise 9: Building histograms (part 2)\nLet’s build some histograms. Try each chunk below, one by one. In each chunk, make a comment about how both the code and the corresponding plot both changed.\n\n# COMMENT on the change in the code and the corresponding change in the plot\nggplot(hikes, aes(x = elevation)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\n# COMMENT on the change in the code and the corresponding change in the plot\nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(color = \"white\") \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\n# COMMENT on the change in the code and the corresponding change in the plot\nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(color = \"white\", fill = \"blue\") \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\n# COMMENT on the change in the code and the corresponding change in the plot\nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(color = \"white\") +\n  labs(x = \"Elevation (feet)\", y = \"Number of hikes\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\n# COMMENT on the change in the code and the corresponding change in the plot\nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(color = \"white\", binwidth = 1000) +\n  labs(x = \"Elevation (feet)\", y = \"Number of hikes\")\n\n\n\n\n\n\n\n\n\n# COMMENT on the change in the code and the corresponding change in the plot\nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(color = \"white\", binwidth = 5) +\n  labs(x = \"Elevation (feet)\", y = \"Number of hikes\")\n\n\n\n\n\n\n\n\n\n# COMMENT on the change in the code and the corresponding change in the plot\nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(color = \"white\", binwidth = 200) +\n  labs(x = \"Elevation (feet)\", y = \"Number of hikes\")",
    "crumbs": [
      "Activities",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Exercise 3 - Univariate Viz</span>"
    ]
  },
  {
    "objectID": "activities/Exercise_3.html#exercise-10-histogram-follow-up",
    "href": "activities/Exercise_3.html#exercise-10-histogram-follow-up",
    "title": "3  Exercise 3 - Univariate Viz",
    "section": "Exercise 10: Histogram follow-up",
    "text": "Exercise 10: Histogram follow-up\n\nWhat function added the histogram layer / geometry?\nWhat’s the difference between color and fill?\nWhy does adding color = \"white\" improve the visualization?\nWhat did binwidth do?\nWhy does the histogram become ineffective if the binwidth is too big (e.g. 1000 feet)?\nWhy does the histogram become ineffective if the binwidth is too small (e.g. 5 feet)?",
    "crumbs": [
      "Activities",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Exercise 3 - Univariate Viz</span>"
    ]
  },
  {
    "objectID": "activities/Exercise_3.html#exercise-11-density-plots",
    "href": "activities/Exercise_3.html#exercise-11-density-plots",
    "title": "3  Exercise 3 - Univariate Viz",
    "section": "Exercise 11: Density plots",
    "text": "Exercise 11: Density plots\nDensity plots are essentially smooth versions of the histogram. Instead of sorting observations into discrete bins, the “density” of observations is calculated across the entire range of outcomes. The greater the number of observations, the greater the density! The density is then scaled so that the area under the density curve always equals 1 and the area under any fraction of the curve represents the fraction of cases that lie in that range.\nCheck out a density plot of elevation. Notice that the y-axis (density) has no contextual interpretation – it’s a relative measure. The higher the density, the more common are elevations in that range.\n\nggplot(hikes, aes(x = elevation)) +\n  geom_density()\n\n\n\n\n\n\n\n\nQuestions\n\nINTUITION CHECK: Before tweaking the code and thinking back to geom_bar() and geom_histogram(), how do you anticipate the following code will change the plot?\n\ngeom_density(color = \"blue\")\ngeom_density(fill = \"orange\")\n\nTRY IT! Test out those lines in the chunk below. Was your intuition correct?\n\n\nExamine the density plot. How does it compare to the histogram? What does it tell you about the typical elevation, variability / range in elevations, and shape of the distribution of elevations within this range?",
    "crumbs": [
      "Activities",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Exercise 3 - Univariate Viz</span>"
    ]
  },
  {
    "objectID": "activities/Exercise_3.html#exercise-12-density-plots-vs-histograms",
    "href": "activities/Exercise_3.html#exercise-12-density-plots-vs-histograms",
    "title": "3  Exercise 3 - Univariate Viz",
    "section": "Exercise 12: Density plots vs histograms",
    "text": "Exercise 12: Density plots vs histograms\nThe histogram and density plot both allow us to visualize the behavior of a quantitative variable: typical outcome, variability / range, shape, and outliers. What are the pros/cons of each? What do you like/not like about each?",
    "crumbs": [
      "Activities",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Exercise 3 - Univariate Viz</span>"
    ]
  },
  {
    "objectID": "activities/Exercise_3.html#exercise-13-code-communication",
    "href": "activities/Exercise_3.html#exercise-13-code-communication",
    "title": "3  Exercise 3 - Univariate Viz",
    "section": "Exercise 13: Code = communication",
    "text": "Exercise 13: Code = communication\nWe obviously won’t be done until we talk about communication. All code above has a similar general structure (where the details can change):\n\nggplot(___, aes(x = ___)) + \n  geom___(color = \"___\", fill = \"___\") + \n  labs(x = \"___\", y = \"___\")\n\n\nThough not necessary to the code working, it’s common, good practice to indent or tab the lines of code after the first line (counterexample below). Why?\n\n\n# YUCK\nggplot(hikes, aes(x = elevation)) +\ngeom_histogram(color = \"white\", binwidth = 200) +\nlabs(x = \"Elevation (feet)\", y = \"Number of hikes\")\n\n\n\n\n\n\n\n\n\nThough not necessary to the code working, it’s common, good practice to put a line break after each + (counterexample below). Why?\n\n\n# YUCK \nggplot(hikes, aes(x = elevation)) + geom_histogram(color = \"white\", binwidth = 200) + labs(x = \"Elevation (feet)\", y = \"Number of hikes\")",
    "crumbs": [
      "Activities",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Exercise 3 - Univariate Viz</span>"
    ]
  },
  {
    "objectID": "activities/Exercise_3.html#exercise-14-practice",
    "href": "activities/Exercise_3.html#exercise-14-practice",
    "title": "3  Exercise 3 - Univariate Viz",
    "section": "Exercise 14: Practice",
    "text": "Exercise 14: Practice\n\nPart a\nPractice your viz skills to learn about some of the variables in one of the following datasets from the previous class:\n\n# Data on students in this class\nsurvey &lt;- read.csv(\"https://mac-stat.github.io/data/high_peaks.csv\")\n\n# World Cup data\nworld_cup &lt;- read.csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-11-29/worldcups.csv\")\n\n\n\nPart b\nCheck out the RStudio Data Visualization cheat sheet to learn more features of ggplot.",
    "crumbs": [
      "Activities",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Exercise 3 - Univariate Viz</span>"
    ]
  },
  {
    "objectID": "activities/Exercise_4.html",
    "href": "activities/Exercise_4.html",
    "title": "4  Exercise 4 - Bivariate Viz",
    "section": "",
    "text": "4.1 Review\nLet’s review some univariate concepts and code using our class survey data. If the answers aren’t at the top of your mind, don’t fret! We’ve barely started speaking this new language, and learned a ton of vocab last week, so you naturally won’t remember it all.\n# Import data\nsurvey &lt;- read.csv(\"https://ajohns24.github.io/data/112/about_us_2024.csv\")\n\n# How many students have now filled out the survey?\n\nnrow(survey)\n\n[1] 28\n\n# What type of variables do we have?",
    "crumbs": [
      "Activities",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Exercise 4 - Bivariate Viz</span>"
    ]
  },
  {
    "objectID": "activities/Exercise_4.html#review",
    "href": "activities/Exercise_4.html#review",
    "title": "4  Exercise 4 - Bivariate Viz",
    "section": "",
    "text": "EXAMPLE 1: Hangout Preferences\nStudents were asked, in that moment, where they’d most like to spend time outside. How did they answer? Was there a lot of agreement or a lot of variability in answers? Build and interpret a plot that helps address these questions while reviewing:\n\n“code as communication”\nconnecting with the components of a plot:\n\nset up a frame\nadd a layer / geometric element\nchange the theme, e.g. axis labels, color, fill\n\n\n\n# Attach a package needed to use the ggplot function\n\n\n# Make a ggplot\n\n\n\nEXAMPLE 2: Temperature Preferences\nStudents were asked about their ideal outdoor temperature, in degrees Celsius. How did they answer? What was the typical response? What was the range in responses? Were there any outliers? Build and interpret 2 plots that help address these questions.\n\n\n\n\n\n\nBar Charts vs. Histograms\n\n\n\nBar charts & histograms can appear pretty similar, but they do different things.\n\nBar charts count up the number of observations of each outcome of a variable. They’re good for categorical variables, or quantitative variables with only a handful of possible outcomes.\nHistograms count up the number of observations that fall into different numerical ranges of variable. They’re good for quantitative variables, especially those with many different observed outcomes.",
    "crumbs": [
      "Activities",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Exercise 4 - Bivariate Viz</span>"
    ]
  },
  {
    "objectID": "activities/Exercise_4.html#new-stuff",
    "href": "activities/Exercise_4.html#new-stuff",
    "title": "4  Exercise 4 - Bivariate Viz",
    "section": "4.2 New stuff",
    "text": "4.2 New stuff\nThus far, we’ve been studying one variable at a time, using univariate plots. But once we get a sense of how individual variables behave on their own, our questions often turn to relationships among variables. For example, in our hikes data:\n\nHow much time does it take to complete a hike? ——&gt; How is time related to a hike’s elevation? What about its length?\nHow does difficult rating vary from hike to hike? ——-&gt; How is difficulty rating related to a hike’s ascent?\n\n\n4.2.1 Exploring relationships\nExploring univariate patterns often sparks follow-up questions about relationships between 2+ variables. Often, but not always, variables take on specific roles:\n\nresponse variable: the variable whose variability we would like to explain (time to complete a hike)\npredictors: variables that might explain some of the variability in the response (a hike’s elevation or length)\n\nVisualizations can help explore:\n\nrelationship trends (direction and form)\nrelationship strength (degree of variability from the trend)\noutliers in the relationship\n\n\nEXAMPLE 3\nFor each pair of variables below, sketch on paper a visualization of their relationship. Focus on general viz process, don’t worry about the exact details. The data here are totally made up.\n\n3pm temperature (response) vs 9am temperature (predictor)\n\n\ndata.frame(temp_3pm = c(24, 26, 20, 15, 15, 15), temp_9am = c(14, 18, 15, 13, 11, 11))\n\n  temp_3pm temp_9am\n1       24       14\n2       26       18\n3       20       15\n4       15       13\n5       15       11\n6       15       11\n\n\n\n3pm temperature (response) vs location (predictor)\n\n\nweather &lt;- data.frame(temp_3pm = c(24, 26, 20, 15, 15, 0, 40, 60, 57, 44, 51, 75),\n                      location = rep(c(\"A\", \"B\"), each = 6))\nweather\n\n   temp_3pm location\n1        24        A\n2        26        A\n3        20        A\n4        15        A\n5        15        A\n6         0        A\n7        40        B\n8        60        B\n9        57        B\n10       44        B\n11       51        B\n12       75        B\n\n\nThink: How might we modify the below density plot of temp_3pm to distinguish between locations?\n\nggplot(weather, aes(x = temp_3pm)) +\n      geom_density()\n\n\n\n\n\n\n\n\n\nrain_today (the response) and location (the predictor)\n\n\nweather &lt;- data.frame(rain_today = c(\"no\", \"no\", \"no\", \"no\", \"yes\", \"no\", \"yes\", \"no\", \"yes\", \"yes\", \"no\", \"yes\"),\n                        location = c(rep(\"A\", 7), rep(\"B\", 5)))\n    weather\n\n   rain_today location\n1          no        A\n2          no        A\n3          no        A\n4          no        A\n5         yes        A\n6          no        A\n7         yes        A\n8          no        B\n9         yes        B\n10        yes        B\n11         no        B\n12        yes        B\n\n\nThink: How might we modify the below bar plot of location to distinguish between days on which it did or didn’t rain?\n\nggplot(weather, aes(x = location)) +\n      geom_bar()\n\n\n\n\n\n\n\n\n\n\n\n4.2.2 General guidance for building bivariate plots\nAs with univariate plots, an appropriate visualization for the relationship between 2 variables depends upon whether the variables are quantitative or categorical. In general:\n\nEach quantitative variable requires a new axis (or a quantitative scale if we run out of axes).\nEach categorical variable requires a new way to “group” the graphic (eg: using colors, shapes, separate facets, etc)\nFor visualizations in which overlap in glyphs or plots obscures the patterns, try faceting or transparency.",
    "crumbs": [
      "Activities",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Exercise 4 - Bivariate Viz</span>"
    ]
  },
  {
    "objectID": "activities/Exercise_4.html#exercises-required",
    "href": "activities/Exercise_4.html#exercises-required",
    "title": "4  Exercise 4 - Bivariate Viz",
    "section": "4.3 Exercises (required)",
    "text": "4.3 Exercises (required)\nGithub user Tony McGovern has compiled and made available 2020/2016/2012 presidential election results for most of 3000+ U.S. counties, except Alaska. (Image: Wikimedia Commons)\n\nA wrangled version of this data, is imported below, after being combined with:\n\n2013 county-level demographics from the df_county_demographics data set from the choroplethr R package\nhistorical voting trends in the state in which the county falls (from https://www.270towin.com/content/blue-and-red-states):\n\nred = consistently Republican\nblue = consistently Democratic\npurple = something in between\n\n\n\n# Load data\nelections &lt;- read.csv(\"https://mac-stat.github.io/data/election_2020_county.csv\")\n\n# Check it out\nhead(elections)\n\n  state_name state_abbr historical    county_name county_fips total_votes_20\n1    Alabama         AL        red Autauga County        1001          27770\n2    Alabama         AL        red Baldwin County        1003         109679\n3    Alabama         AL        red Barbour County        1005          10518\n4    Alabama         AL        red    Bibb County        1007           9595\n5    Alabama         AL        red  Blount County        1009          27588\n6    Alabama         AL        red Bullock County        1011           4613\n  repub_pct_20 dem_pct_20 winner_20 total_votes_16 repub_pct_16 dem_pct_16\n1        71.44      27.02     repub          24661        73.44      23.96\n2        76.17      22.41     repub          94090        77.35      19.57\n3        53.45      45.79     repub          10390        52.27      46.66\n4        78.43      20.70     repub           8748        76.97      21.42\n5        89.57       9.57     repub          25384        89.85       8.47\n6        24.84      74.70       dem           4701        24.23      75.09\n  winner_16 total_votes_12 repub_pct_12 dem_pct_12 winner_12 total_population\n1     repub          23909        72.63      26.58     repub            54907\n2     repub          84988        77.39      21.57     repub           187114\n3     repub          11459        48.34      51.25       dem            27321\n4     repub           8391        73.07      26.22     repub            22754\n5     repub          23980        86.49      12.35     repub            57623\n6       dem           5318        23.51      76.31       dem            10746\n  percent_white percent_black percent_asian percent_hispanic per_capita_income\n1            76            18             1                2             24571\n2            83             9             1                4             26766\n3            46            46             0                5             16829\n4            75            22             0                2             17427\n5            88             1             0                8             20730\n6            22            71             0                6             18628\n  median_rent median_age\n1         668       37.5\n2         693       41.5\n3         382       38.3\n4         351       39.4\n5         403       39.6\n6         276       39.6\n\n\nWe’ll use this data to explore voting outcomes within the U.S.’s 2-party system. Here’s a list of candidates by year:\n\n\n\nyear\nRepublican candidate\nDemocratic candidate\n\n\n\n\n2020\nDonald Trump\nJoe Biden\n\n\n2016\nDonald Trump\nHillary Clinton\n\n\n2012\nMitt Romney\nBarack Obama\n\n\n\n\nExercise 0: Review\n\nPart a\nHow many, or roughly what percent, of the 3000+ counties did the Republican candidate win in 2020?\n\nTake a guess.\nThen make a plot of the winner variable.\nThen discuss what follow-up questions you might have (and that our data might help us answer).\n\n\n\nPart b\nThe repub_pct_20 variable provides more detail about the Republican support in each county. Construct a plot of repub_pct_20.\nNotice that the distribution of Republican support from county to county is slightly left skewed or negatively skewed.\nWhat follow-up questions do you have?\n\n\n\nExercise 1: Quantitative vs Quantitative Intuition Check\n\n\n\n\n\n\nBe Quick\n\n\n\nDon’t spend more than 3 minutes on this!\n\n\nBelow is a scatterplot of the Republican support in 2020 vs 2016. Notice that:\n\nboth variables are quantitative, and get their own axes\nthe response variable is on the y-axis, demonstrating how repub_pct_20 might be predicted by repub_pct_16, not vice versa\n\nTry to replicate this using ggplot(). THINK:\n\nWhat info do you need to set up the canvas?\nWhat geometric layer (geom_???) might add these dots / points for each county? We haven’t learned this yet, just take some guesses.\n\n\n\n\nExercise 2: 2 Quantitiative Variables\nRun each chunk below to build up a a scatterplot of repub_pct_20 vs repub_pct_16 with different glyphs representing each county. Address or think about any prompts in the comments (#).\n\n# Set up the plotting frame\n# How does this differ than the frame for our histogram of repub_pct_20 alone?\nggplot(elections, aes(y = repub_pct_20, x = repub_pct_16))\n\n\n# Add a layer of points for each county\n# Take note of the geom!\nggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +\n  geom_point()\n\n\n# Change the shape of the points\n# What happens if you change the shape to another number?\nggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +\n  geom_point(shape = 3)\n\n\n# YOU TRY: Modify the code to make the points \"orange\"\n# NOTE: Try to anticipate if \"color\" or \"fill\" will be useful here. Then try both.\nggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n# Add a layer that represents each county by the state it's in\n# Take note of the geom and the info it needs to run!\nggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +\n  geom_text(aes(label = state_abbr))\n\n\n\nExercise 3: Reflect\nSummarize the relationship between the Republican support in 2020 and 2016. Be sure to comment on:\n\nthe strength of the relationship (weak/moderate/strong)\n\nthe direction of the relationship (positive/negative)\n\noutliers (in what state do counties deviate from the national trend? Any ideas why this might be the case?)\n\n\n\nExercise 4: Visualizing trend\nThe trend of the relationship between repub_pct_20 and repub_pct_16 is clearly positive and (mostly) linear. We can highlight this trend by adding a model “smooth” to the plot:\n\nggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +\n  geom_point() +\n  geom_smooth()\n\n\nPart a\nConstruct a new plot that contains the model smooth but does not include the individual point glyphs.\n\n\nPart b\nBy default, geom_smooth() adds a smooth, localized model line. To examine the “best” linear model, we can specify method = \"lm\". It’s pretty similar in this example!\n\nggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n\n\n\n\nExercise 5: Your Turn\nTo examine how the 2020 results are related to some county demographics, construct scatterplots of repub_pct_20 vs median_rent, and repub_pct_20 vs median_age. Summarize the relationship between these two variables and comment on which is the better predictor of repub_pct_20, median_rent or median_age.\n\n# Scatterplot of repub_pct_20 vs median_rent\n\n\n\n# Scatterplot of repub_pct_20 vs median_age\n\n\n\nExercise 6: A Sad Scatterplot\nNext, let’s explore the relationship between a county’s 2020 Republican support repub_pct_20 and the historical political trends in its state. In this case repub_pct_20 is quantitative, but historical is categorical. Explain why a scatterplot might not be an effective visualization for exploring this relationship. (What questions does / doesn’t it help answer?)\n\nggplot(elections, aes(y = repub_pct_20, x = historical)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\nExercise 7: Quantitative vs Categorical – Violins & Boxes\nThough the above scatterplot did group the counties by historical category, it’s nearly impossible to pick out meaningful patterns in 2020 Republican support in each category. Let’s try adding 2 different geom layers to the frame:\n\n# Side-by-side violin plots\nggplot(elections, aes(y = repub_pct_20, x = historical)) +\n  geom_violin()\n\n\n# Side-by-side boxplots (defined below)\nggplot(elections, aes(y = repub_pct_20, x = historical)) +\n  geom_boxplot()\n\nBox plots are constructed from five numbers - the minimum, 25th percentile, median, 75th percentile, and maximum value of a quantitative variable:\n\nREFLECT:\nSummarize what you’ve learned about the 2020 Republican county-level support within and between red/purple/blue states.\n\n\nExercise 8: Quantitative vs Categorical – Intuition Check\n\n\n\n\n\n\nBe Quick\n\n\n\nDon’t spend more than 3 minutes on this!\n\n\nWe can also visualize the relationship between repub_pct_20 and historical using our familiar density plots. In the plot below, notice that we simply created a separate density plot for each historical category. (The plot itself is “bad” but we’ll fix it below.) Try to adjust the code chunk below, which starts with a density plot of repub_pct_20 alone, to re-create this image.\n\n\nggplot(elections, aes(x = repub_pct_20)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\n\nExercise 9: Quantitative vs Categorical – Density Plots\nWork through the chunks below and address the comments therein.\n\n# Name two \"bad\" things about this plot\nggplot(elections, aes(x = repub_pct_20, fill = historical)) +\n  geom_density()\n\n\n# What does scale_fill_manual do?\nggplot(elections, aes(x = repub_pct_20, fill = historical)) +\n  geom_density() +\n  scale_fill_manual(values = c(\"blue\", \"purple\", \"red\"))\n\n\n# What does alpha = 0.5 do?\n# Play around with different values of alpha, between 0 and 1\nggplot(elections, aes(x = repub_pct_20, fill = historical)) +\n  geom_density(alpha = 0.5) +\n  scale_fill_manual(values = c(\"blue\", \"purple\", \"red\"))\n\n\n# What does facet_wrap do?!\nggplot(elections, aes(x = repub_pct_20, fill = historical)) +\n  geom_density() +\n  scale_fill_manual(values = c(\"blue\", \"purple\", \"red\")) +\n  facet_wrap(~ historical)\n\n\n# Let's try a similar grouping strategy with a histogram instead of density plot.\n# Why is this terrible?\nggplot(elections, aes(x = repub_pct_20, fill = historical)) +\n  geom_histogram(color = \"white\") +\n  scale_fill_manual(values = c(\"blue\", \"purple\", \"red\"))\n\n\n\nExercise 10\nWe’ve now learned 3 (of many) ways to visualize the relationship between a quantitative and categorical variable: side-by-side violins, boxplots, and density plots.\n\nWhich do you like best?\nWhat is one pro of density plots relative to boxplots?\nWhat is one con of density plots relative to boxplots?\n\n\n\nExercise 11: Categorical vs Categorical – Intuition Check\nFinally, let’s simply explore who won each county in 2020 (winner_20) and how this breaks down by historical voting trends in the state. That is, let’s explore the relationship between 2 categorical variables! Following the same themes as above, we can utilize grouping features such as fill/color or facets to distinguish between different categories of winner_20 and historical.\n\n\n\n\n\n\nBe Quick\n\n\n\nSpend at most 5 minutes on the following intuition check. Adjust the code below to recreate the following two plots.\n\n\n\n\n# Plot 1: adjust this to recreate the top plot\nggplot(elections, aes(x = historical)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n# Plot 2: adjust this to recreate the bottom plot\nggplot(elections, aes(x = winner_20)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\nExercise 12: Categorical vs Categorical\nConstruct the following 4 bar plot visualizations.\n\n# A stacked bar plot\n# How are the \"historical\" and \"winner_20\" variables mapped to the plot, i.e. what roles do they play?\nggplot(elections, aes(x = historical, fill = winner_20)) +\n  geom_bar()\n\n\n# A faceted bar plot\nggplot(elections, aes(x = winner_20)) +\n  geom_bar() +\n  facet_wrap(~ historical)\n\n\n# A side-by-side bar plot\n# Note the new argument to geom_bar\nggplot(elections, aes(x = historical, fill = winner_20)) +\n  geom_bar(position = \"dodge\")\n\n\n# A proportional bar plot\n# Note the new argument to geom_bar\nggplot(elections, aes(x = historical, fill = winner_20)) +\n  geom_bar(position = \"fill\")\n\n\nPart a\nName one pro and one con of using the “proportional bar plot” instead of one of the other three options.\n\n\nPart b\nWhat’s your favorite bar plot from part and why?\n\n\n\nExercise 13: Practice (now or later)\n\n\n\n\n\n\nDecide\n\n\n\nDecide what’s best for you:\n\nTry this extra practice now.\nReflect on the above exercises and come back to this extra practice later (but before the next class).\n\n\n\nImport some daily weather data from a few locations in Australia:\n\nweather &lt;- read.csv(\"https://mac-stat.github.io/data/weather_3_locations.csv\")\n\nConstruct plots that address the research questions in each chunk. You might make multiple plots–there are many ways to do things!. However, don’t just throw spaghetti at the wall.\nReflect before doing anything. What types of variables are these? How might you plot just 1 of the variables, and then tweak the plot to incorporate the other?\n\n# How do 3pm temperatures (temp3pm) differ by location?\n\n\n# How might we predict the 3pm temperature (temp3pm) by the 9am temperature (temp9am)?\n\n\n# How do the number of rainy days (raintoday) differ by location?",
    "crumbs": [
      "Activities",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Exercise 4 - Bivariate Viz</span>"
    ]
  },
  {
    "objectID": "activities/Exercise_5.html",
    "href": "activities/Exercise_5.html",
    "title": "5  Exercise 5 - Multivariate Viz",
    "section": "",
    "text": "5.1 Review\nLet’s review some univariate and bivariate plotting concepts using some daily weather data from Australia. This is a subset of the data from the weatherAUS data in the rattle package.\nlibrary(tidyverse)\n\n# Import data\nweather &lt;- read.csv(\"https://mac-stat.github.io/data/weather_3_locations.csv\") |&gt; \n  mutate(date = as.Date(date))  \n\n# Check out the first 6 rows\n# What are the units of observation?\n\n\n# How many data points do we have? \n\n\n# What type of variables do we have?",
    "crumbs": [
      "Activities",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Exercise 5 - Multivariate Viz</span>"
    ]
  },
  {
    "objectID": "activities/Exercise_5.html#review",
    "href": "activities/Exercise_5.html#review",
    "title": "5  Exercise 5 - Multivariate Viz",
    "section": "",
    "text": "Example 1\nConstruct a plot that allows us to examine how temp3pm varies.\n\n\nExample 2\nConstruct 3 plots that address the following research question:\nHow do afternoon temperatures (temp3pm) differ by location?\n\n# Plot 1 (no facets & starting from a density plot of temp3pm)\nggplot(weather, aes(x = temp3pm)) + \n  geom_density()\n\n\n\n\n\n\n\n\n\n# Plot 2 (no facets or densities)\n\n\n# Plot 3 (facets)\n\n\nReflection\n\nTemperatures tend to be highest, and most variable, in Uluru. There, they range from ~10 to ~45 with a typical temp around ~30 degrees.\nTemperatures tend to be lowest in Hobart. There, they range from ~5 to ~45 with a typical temp around ~15 degrees.\nWollongong temps are in between and are the least variable from day to day.\n\nSUBTLETIES: Defining fill or color by a variable\nHow we define the fill or color depends upon whether we’re defining it by a named color or by some variable in our dataset. For example:\n\ngeom___(fill = \"blue\")\nnamed colors are defined outside the aesthetics and put in quotes\ngeom___(aes(fill = variable)) or ggplot(___, aes(fill = variable))\ncolors/fills defined by a variable are defined inside the aesthetics\n\n\n\n\nExample 3\nLet’s consider Wollongong alone:\n\n# Don't worry about the syntax (we'll learn it soon)\nwoll &lt;- weather |&gt;\n  filter(location == \"Wollongong\") |&gt; \n  mutate(date = as.Date(date))  \n\n\n# How often does it raintoday?\n# Fill your geometric layer with the color blue.\nggplot(woll, aes(x = raintoday))\n\n\n\n\n\n\n\n\n\n# If it does raintoday, what does this tell us about raintomorrow?\n# Use your intuition first\nggplot(woll, aes(x = raintoday))\n\n\n\n\n\n\n\n\n\n# Now compare different approaches\n\n# Default: stacked bars\nggplot(woll, aes(x = raintoday, fill = raintomorrow)) + \n  geom_bar()\n\n\n\n\n\n\n\n\n\n# Side-by-side bars\nggplot(woll, aes(x = raintoday, fill = raintomorrow)) + \n  geom_bar(position = \"dodge\")\n\n\n\n\n\n\n\n\n\n# Proportional bars\n# position = \"fill\" refers to filling the frame, nothing to do with the color-related fill\nggplot(woll, aes(x = raintoday, fill = raintomorrow)) + \n  geom_bar(position = \"fill\")\n\n\n\n\n\n\n\n\n\nReflection\nThere’s often not one “best plot”, but a combination of plots that provide a complete picture:\n\nThe stacked and side-by-side bars reflect that on most days, it does not rain.\nThe proportional / filled bars lose that information, but make it easier to compare proportions: it’s more likely to rain tomorrow if it also rains today.\n\n\n\n\nExample 4\nConstruct a plot that illustrates how 3pm temperatures (temp3pm) vary by date in Wollongong. Represent each day on the plot and use a curve/line to help highlight the trends.\n\n# THINK: What variable goes on the y-axis?\n# For the curve, try adding span = 0.5 to tweak the curvature\n\n\n# Instead of a curve that captures the general TREND,\n# draw a line that illustrates the movement of RAW temperatures from day to day\n# NOTE: We haven't learned this geom yet! Guess.\nggplot(woll, aes(y = temp3pm, x = date))\n\n\n\n\n\n\n\n\nNOTE: A line plot isn’t always appropriate! It can be useful in situations like this, when our data are chronological.\n\nReflection\nThere’s a seasonal / cyclic behavior in temperatures – they’re highest in January (around 23 degrees) and lowest in July (around 16 degrees). There are also some outliers – some abnormally hot and cold days.",
    "crumbs": [
      "Activities",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Exercise 5 - Multivariate Viz</span>"
    ]
  },
  {
    "objectID": "activities/Exercise_5.html#new-stuff",
    "href": "activities/Exercise_5.html#new-stuff",
    "title": "5  Exercise 5 - Multivariate Viz",
    "section": "5.2 New Stuff",
    "text": "5.2 New Stuff\nNext, let’s consider the entire weather data for all 3 locations. The addition of location adds a 3rd variable into our research questions:\n\nHow does the relationship between raintoday and raintomorrow vary by location?\nHow does the behavior of temp3pm over date vary by location?\nAnd so on.\n\nThus far, we’ve focused on the following components of a plot:\n\nsetting up a frame\nadding layers / geometric elements\nsplitting the plot into facets for different groups / categories\nchange the theme, e.g. axis labels, color, fill\n\nWe’ll have to think about all of this, along with scales. Scales change the color, fill, size, shape, or other properties according to the levels of a new variable. This is different than just assigning scale by, for example, color = \"blue\".\nWork on the examples below in your groups. Check in with your intuition! We’ll then discuss as a group as relevant.\n\nExample 5\n\n# Plot temp3pm vs temp9am\n# Change the code in order to indicate the location to which each data point corresponds\nggplot(weather, aes(y = temp3pm, x = temp9am)) + \n  geom_point()\n\n\n\n\n\n\n\n\n\n# Change the code in order to indicate the location to which each data point corresponds\n# AND identify the days on which it rained / didn't raintoday\nggplot(weather, aes(y = temp3pm, x = temp9am)) + \n  geom_point()\n\n\n\n\n\n\n\n\n\n# How many ways can you think to make that plot of temp3pm vs temp9am with info about location and rain?\n# Play around!\n\n\n\nExample 6\n\n# Change the code in order to construct a line plot of temp3pm vs date for each separate location (no points!)\nggplot(weather, aes(y = temp3pm, x = date)) + \n  geom_line()\n\n\n\n\n\n\n\n\n\n\nExample 7\n\n# Plot the relationship of raintomorrow & raintoday\n# Change the code in order to indicate this relationship by location\nggplot(weather, aes(x = raintoday, fill = raintomorrow)) + \n  geom_bar(position = \"fill\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow to Not Get Overwhelmed?\n\n\n\nThere’s no end to the number and type of visualizations you could make. And it’s important to not just throw spaghetti at the wall until something sticks. FlowingData shows that one dataset can be visualized many ways, and makes good recommendations for data viz workflow, which we modify and build upon here:\n\nIdentify simple research questions.\nWhat do you want to understand about the variables or the relationships among them?\nStart with the basics and work incrementally.\n\nIdentify what variables you want to include in your plot and what structure these have (eg: categorical, quantitative, dates)\nStart simply. Build a plot of just 1 of these variables, or the relationship between 2 of these variables.\nSet up a plotting frame and add just one geometric layer at a time.\nStart tweaking: add whatever new variables you want to examine,\n\nAsk your plot questions.\n\nWhat questions does your plot answer? What questions are left unanswered by your plot?\nWhat new questions does your plot spark / inspire?\nDo you have the viz tools to answer these questions, or might you learn more?\n\nFocus.\nReporting a large number of visualizations can overwhelm the audience and obscure your conclusions. Instead, pick out a focused yet comprehensive set of visualizations.",
    "crumbs": [
      "Activities",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Exercise 5 - Multivariate Viz</span>"
    ]
  },
  {
    "objectID": "activities/Exercise_5.html#exercises-required",
    "href": "activities/Exercise_5.html#exercises-required",
    "title": "5  Exercise 5 - Multivariate Viz",
    "section": "5.3 Exercises (required)",
    "text": "5.3 Exercises (required)\n\nThe story\nThough far from a perfect assessment of academic preparedness, SAT scores have historically been used as one measurement of a state’s education system. The education dataset contains various education variables for each state:\n\n# Import and check out data\neducation &lt;- read.csv(\"https://mac-stat.github.io/data/sat.csv\")\nhead(education)\n\n       State expend ratio salary frac verbal math  sat  fracCat\n1    Alabama  4.405  17.2 31.144    8    491  538 1029   (0,15]\n2     Alaska  8.963  17.6 47.951   47    445  489  934 (45,100]\n3    Arizona  4.778  19.3 32.175   27    448  496  944  (15,45]\n4   Arkansas  4.459  17.1 28.934    6    482  523 1005   (0,15]\n5 California  4.992  24.0 41.078   45    417  485  902  (15,45]\n6   Colorado  5.443  18.4 34.571   29    462  518  980  (15,45]\n\n\nA codebook is provided by Danny Kaplan who also made these data accessible:\n{width = 50%}\n\n\nExercise 1: SAT scores\n\nPart a\nConstruct a plot of how the average sat scores vary from state to state. (Just use 1 variable – sat not State!)\n\n\nPart b\nSummarize your observations from the plot. Comment on the basics: range, typical outcomes, shape. (Any theories about what might explain this non-normal shape?)\n\n\n\nExercise 2: SAT Scores vs Per Pupil Spending & SAT Scores vs Salaries\nThe first question we’d like to answer is: Can the variability in sat scores from state to state be partially explained by how much a state spends on education, specifically its per pupil spending (expend) and typical teacher salary?\n\nPart a\n\n# Construct a plot of sat vs expend\n# Include a \"best fit linear regression model\" (HINT: method = \"lm\")\n\n\n# Construct a plot of sat vs salary\n# Include a \"best fit linear regression model\" (HINT: method = \"lm\")\n\n\n\nPart b\nWhat are the relationship trends between SAT scores and spending? Is there anything that surprises you?\n\n\n\nExercise 3: SAT Scores vs Per Pupil Spending and Teacher Salaries\nConstruct one visualization of the relationship of sat with salary and expend. HINT: Start with just 2 variables and tweak that code to add the third variable. Try out a few things!\n\n\nExercise 4: Another way to Incorporate Scale\nIt can be tough to distinguish color scales and size scales for quantitative variables. Another option is to discretize a quantitative variable, or basically cut it up into categories.\nConstruct the plot below. Check out the code and think about what’s happening here. What happens if you change “2” to “3”?\n\nggplot(education, aes(y = sat, x = salary, color = cut(expend, 2))) + \n  geom_point() + \n  geom_smooth(se = FALSE, method = \"lm\")\n\nDescribe the trivariate relationship between sat, salary, and expend.\n\n\nExercise 5: Finally an Explanation\nIt’s strange that SAT scores seem to decrease with spending. But we’re leaving out an important variable from our analysis: the fraction of a state’s students that actually take the SAT. The fracCat variable indicates this fraction: low (under 15% take the SAT), medium (15-45% take the SAT), and high (at least 45% take the SAT).\n\nPart a\nBuild a univariate viz of fracCat to better understand how many states fall into each category.\n\n\nPart b\nBuild 2 bivariate visualizations that demonstrate the relationship between sat and fracCat. What story does your graphic tell and why does this make contextual sense?\n\n\nPart c\nMake a trivariate visualization that demonstrates the relationship of sat with expend AND fracCat. Highlight the differences in fracCat groups through color AND unique trend lines. What story does your graphic tell?\nDoes it still seem that SAT scores decrease as spending increases?\n\n\nPart d\nPutting all of this together, explain this example of Simpson’s Paradox. That is, why did it appear that SAT scores decrease as spending increases even though the opposite is true?",
    "crumbs": [
      "Activities",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Exercise 5 - Multivariate Viz</span>"
    ]
  },
  {
    "objectID": "activities/Exercise_5.html#exercises-optional",
    "href": "activities/Exercise_5.html#exercises-optional",
    "title": "5  Exercise 5 - Multivariate Viz",
    "section": "5.4 Exercises (optional)",
    "text": "5.4 Exercises (optional)\n\nExercise 6: Heat Maps\nAs usual, we’ve only just scratched the surface! There are lots of other data viz techniques for exploring multivariate relationships. Let’s start with a heat map.\n\nPart a\nRun the chunks below. Check out the code, but don’t worry about every little detail! NOTES:\n\nThis is not part of the ggplot() grammar, making it a bit complicated.\nIf you’re curious about what a line in the plot does, comment it out (#) and check out what happens!\nIn the plot, for each state (row), each variable (column) is scaled to indicate whether the state has a relative high value (yellow), a relatively low value (purple), or something in between (blues/greens).\nYou can also play with the color scheme. Type ?cm.colors in the console to learn about various options.\nWe’ll improve the plot later, so don’t spend too much time trying to learn something from this plot.\n\n\n# Remove the \"State\" column and use it to label the rows\n# Then scale the variables\nplot_data &lt;- education |&gt; \n  column_to_rownames(\"State\") |&gt; \n  data.matrix() |&gt; \n  scale()\n\n# Load the gplots package needed for heatmaps\nlibrary(gplots)\n\n# Construct heatmap 1\nheatmap.2(plot_data,\n  dendrogram = \"none\",\n  Rowv = NA, \n  scale = \"column\",\n  keysize = 0.7, \n  density.info = \"none\",\n  col = hcl.colors(256), \n  margins = c(10, 20),\n  colsep = c(1:7), rowsep = (1:50), sepwidth = c(0.05, 0.05),\n  sepcolor = \"white\", trace = \"none\"\n)\n\n\n# Construct heatmap 2\nheatmap.2(plot_data,\n  dendrogram = \"none\",\n  Rowv = TRUE,             ### WE CHANGED THIS FROM NA TO TRUE\n  scale = \"column\",\n  keysize = 0.7, \n  density.info = \"none\",\n  col = hcl.colors(256), \n  margins = c(10, 20),\n  colsep = c(1:7), rowsep = (1:50), sepwidth = c(0.05, 0.05),\n  sepcolor = \"white\", trace = \"none\"\n)\n\n\n# Construct heatmap 3\nheatmap.2(plot_data,\n  dendrogram = \"row\",       ### WE CHANGED THIS FROM \"none\" TO \"row\"\n  Rowv = TRUE,            \n  scale = \"column\",\n  keysize = 0.7, \n  density.info = \"none\",\n  col = hcl.colors(256), \n  margins = c(10, 20),\n  colsep = c(1:7), rowsep = (1:50), sepwidth = c(0.05, 0.05),\n  sepcolor = \"white\", trace = \"none\"\n)\n\n\n\nPart b\nIn the final two plots, the states (rows) are rearranged by similarity with respect to these education metrics. The final plot includes a dendrogram which further indicates clusters of similar states. In short, states that have a shorter path to connection are more similar than others.\nPutting this all together, what insight do you gain about the education trends across U.S. states? Which states are similar? In what ways are they similar? Are there any outliers with respect to 1 or more of the education metrics?\n\n\n\nExercise 7: Star plots\nLike heat maps, star plots indicate the relative scale of each variable for each state. Thus, we can use star maps to identify similar groups of states, and unusual states!\n\nPart a\nConstruct and check out the star plot below. Note that each state has a “pie”, with each segment corresponding to a different variable. The larger a segment, the larger that variable’s value is in that state. For example:\n\nCheck out Minnesota. How does Minnesota’s education metrics compare to those in other states? What metrics are relatively high? Relatively low?\nWhat states appear to be similar? Do these observations agree with those that you gained from the heat map?\n\n\nstars(plot_data,\n  flip.labels = FALSE,\n  key.loc = c(10, 1.5),\n  cex = 1, \n  draw.segments = TRUE\n)\n\n\n\nPart b\nFinally, let’s plot the state stars by geographic location! What new insight do you gain here?!\n\nstars(plot_data,\n  flip.labels = FALSE,\n  locations = data.matrix(as.data.frame(state.center)),  # added external data to arrange by geo location\n  key.loc = c(-110, 28),\n  cex = 1, \n  draw.segments = TRUE\n)",
    "crumbs": [
      "Activities",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Exercise 5 - Multivariate Viz</span>"
    ]
  },
  {
    "objectID": "notes/README.html",
    "href": "notes/README.html",
    "title": "Notes",
    "section": "",
    "text": "All notes live here.",
    "crumbs": [
      "Notes"
    ]
  },
  {
    "objectID": "notes/note-01.html",
    "href": "notes/note-01.html",
    "title": "6  Exercise 1 Notes",
    "section": "",
    "text": "I learned some helpful functions in this section, such as seq() and nchar(). I had some difficulty when remebering to put quotation marks in the right spot, but overall I understood all of the assignments.",
    "crumbs": [
      "Notes",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Exercise 1 Notes</span>"
    ]
  }
]